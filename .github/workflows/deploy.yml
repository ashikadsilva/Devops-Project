name: CI/CD with Terraform

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  SUBNET_ID: ${{ secrets.AWS_PUBLIC_SUBNET_ID }}

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET_NAME }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="key=terraform.tfstate"
        working-directory: ./terraform

      - name: Terraform Plan & Apply
        run: |
          terraform plan \
            -var="region=${{ env.AWS_REGION }}" \
            -var="public_key=$PUBLIC_SSH_KEY" \
            -var="private_key=$PRIVATE_SSH_KEY" \
            -var="key_name=deployer-key" \
            -var="subnet_id=$SUBNET_ID" \
            -out=planfile
          terraform apply -auto-approve planfile
        working-directory: ./terraform

      - name: Set instance_public_ip as job output
        id: set-ip
        run: |
          IP=$(terraform output -raw instance_public_ip)
          echo "DEBUG: instance_public_ip='$IP'"
          if [ -z "$IP" ]; then
            echo "ERROR: instance_public_ip is empty. Terraform didn't produce a public IP."
            exit 1
          fi
          echo "instance_public_ip=$IP" >> $GITHUB_OUTPUT
        working-directory: ./terraform

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin 616601340748.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build & push Docker image
        working-directory: ./nodeapp
        env:
          REGISTRY: 616601340748.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Wait for EC2 SSH
        run: |
          IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}
          echo "Waiting for EC2 ($IP) to accept SSH..."
          for i in {1..30}; do
            nc -z -v -w5 $IP 22 && break
            sleep 10
          done

      - name: Deploy Docker image via SSH
        uses: appleboy/ssh-action@v0.1.8
        env:
          REGISTRY: 616601340748.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: ${{ env.AWS_REGION }}
        with:
          host: ${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          port: 22
          envs: REGISTRY,REPOSITORY,IMAGE_TAG,AWS_REGION
          script: |
            # Install Docker & AWS CLI if missing
            if ! command -v docker &> /dev/null; then
              sudo apt update -y
              sudo apt install -y docker.io unzip curl
              sudo systemctl enable --now docker
            fi

            if ! command -v aws &> /dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws/
            fi

            # Login to ECR
              aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $REGISTRY

              # Stop & remove old container
              sudo docker stop myappcontainer || true
              sudo docker rm myappcontainer || true

              # Pull & run new container
              sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
              sudo docker run -d --name myappcontainer -p 80:3000 $REGISTRY/$REPOSITORY:$IMAGE_TAG

