name: CI/CD with Terraform
on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  SUBNET_ID: ${{ secrets.AWS_PUBLIC_SUBNET_ID }}

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ap-south-1
      TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
      PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
      PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
      SUBNET_ID: ${{ secrets.SUBNET_ID }}
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET_NAME }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="key=terraform.tfstate"
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="region=${{ env.AWS_REGION }}" \
            -var="public_key=$PUBLIC_SSH_KEY" \
            -var="private_key=$PRIVATE_SSH_KEY" \
            -var="key_name=deployer-key" \
            -var="subnet_id=$SUBNET_ID" \
            -out=PLAN
        working-directory: ./terraform

      - name: Terraform Apply (apply PLAN)
        id: apply
        run: terraform apply -auto-approve PLAN
        working-directory: ./terraform

      - name: Debug - Show Terraform Outputs (for CI logs)
        run: |
          echo "---- terraform outputs ----"
          terraform output || true
          echo "---- terraform outputs (raw json) ----"
          terraform output -json || true
        working-directory: ./terraform

      - name: Set instance_public_ip as job output
        id: set-ip
        run: |
          # Use -raw to get plain value; fail fast if empty
          IP=$(terraform output -raw instance_public_ip 2>/dev/null || true)
          echo "DEBUG: instance_public_ip='$IP'"
          if [ -z "$IP" ]; then
            echo "ERROR: instance_public_ip is empty. Terraform didn't produce a public IP."
            exit 1
          fi
          echo "instance_public_ip=$IP" >> $GITHUB_OUTPUT
        working-directory: ./terraform

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to AWS ECR (use aws cli to avoid leaking pw)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws --version
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin 616601340748.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build & push docker image
        working-directory: ./nodeapp
        env:
          REGISTRY: 616601340748.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Debug show deploy-infra output (sanity check)
        run: |
          echo "deploy-infra returned SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}"
          
      - name: Deploy docker image to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          port: 22
          envs: REGISTRY,REPOSITORY,IMAGE_TAG,AWS_REGION
          script: |
            # Update packages
            sudo apt update -y
            sudo apt upgrade -y

            # Install Docker if not already installed
            if ! command -v docker &> /dev/null
            then
                sudo apt install -y docker.io unzip curl
                sudo systemctl enable --now docker
            fi

            # Install AWS CLI v2 if not already installed
            if ! command -v aws &> /dev/null
            then
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
                rm -rf awscliv2.zip aws/
            fi
            aws --version

            # Login to ECR
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $REGISTRY

            # Stop & remove existing container if running
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true

            # Pull new image and run container
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:3000 $REGISTRY/$REPOSITORY:$IMAGE_TAG