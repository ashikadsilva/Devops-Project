name: CI/CD with Terraform
'on':
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME}}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE}}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC}}
  AWS_REGION: ap-south-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs: 
      server_ip: ${{ steps.get-ip.outputs.ip }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET_NAME }}"
          -backend-config="region=${{ env.AWS_REGION }}"
          -backend-config="key=terraform.tfstate"
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: |-
          echo "=== Starting Terraform Plan ==="
          terraform plan \
          -var="region=ap-south-1" \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=deployer-key" \
          -out=PLAN
          echo "=== Terraform Plan completed successfully ==="
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: |-
          terraform apply PLAN
          echo "=== Terraform Apply completed ==="
          terraform show | grep -A 5 -B 5 "public_ip"
        working-directory: ./terraform
      - name: Get instance IP
        id: get-ip
        run: |-
          IP=$(terraform output -raw instance_public_ip)
          echo "Terraform output IP: $IP"
          echo "ip=$IP" >> $GITHUB_OUTPUT
          echo "IP set in output: $IP"
        working-directory: ./terraform

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Debug received IP
        run: |-
          echo "Received IP from previous job: ${{ needs.deploy-infra.outputs.server_ip }}"
          if [ -z "${{ needs.deploy-infra.outputs.server_ip }}" ]; then
            echo "ERROR: No IP received!"
            exit 1
          fi
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
      - name: Build, push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: ap-south-1
        run: |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./nodeapp
      - name: Deploy docker image to EC2
        env: 
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: ap-south-1
          SERVER_IP: ${{ needs.deploy-infra.outputs.server_ip }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.deploy-infra.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          envs: REGISTRY, REPOSITORY, IMAGE_TAG, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION, AWS_REGION
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            aws ecr get-login-password --region ap-south-1 | sudo docker login --username AWS --password-stdin $REGISTRY
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:3000 $REGISTRY/$REPOSITORY:$IMAGE_TAG